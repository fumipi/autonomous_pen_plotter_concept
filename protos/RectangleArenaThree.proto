#VRML_SIM R2023b utf8

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/Parquetry.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/appearances/protos/BrushedAluminium.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/objects/floors/protos/Floor.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2023b/projects/objects/solids/protos/SolidBox.proto"

PROTO RectangleArenaThree [
  field SFVec3f    translation     0 0 0
  field SFRotation rotation        0 0 1 0
  field SFString   name            "rectangle arena"
  field SFString   contactMaterial "default"                       # Is `Solid.contactMaterial`.
  field SFVec2f    floorSize       3 3                             # Defines the size of the floor.
  field SFVec2f    floorTileSize   0.5 0.5                         # Defines the size of the texture used for the floor.
  field SFNode     floorAppearance Parquetry { type "chequered" }  # Defines the appearance of the floor.
  field SFFloat    wallThickness   0.01                            # Defines the thickness of the walls.
  field SFFloat    wallHeight      0.1                             # Defines the height of the walls.
  field SFNode     wallAppearance  BrushedAluminium {}             # Defines the appearance of the wall.
]
{
  %{
    local floorSize = fields.floorSize.value
    if floorSize.x <= 0.0 or floorSize.y <= 0.0 then
      floorSize = fields.floorSize.defaultValue
      print('Warning: \'floorSize\' must contain positive values. Value reset to (' .. floorSize.x .. ', ' .. floorSize.y .. ').')
    end

    local wallThickness = fields.wallThickness.value
    if wallThickness <= 0 then
      wallThickness = fields.wallThickness.defaultValue
      print('Warning: \'wallThickness\' must be strictly positive. Value reset to ' .. wallThickness .. '.')
    end

    local wallHeight = fields.wallHeight.value
    if wallHeight <= 0 then
      wallHeight = fields.wallHeight.defaultValue
      print('Warning: \'wallHeight\' must be strictly positive. Value reset to ' .. wallHeight .. '.')
    end
  }%
  Solid {
    translation IS translation
    rotation IS rotation
    children [
      Floor {
        size %{= floorSize.x }% %{= floorSize.y }%
        tileSize IS floorTileSize
        appearance IS floorAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation %{= floorSize.x * 0.5 + wallThickness * 0.5 }% 0 %{= wallHeight * 0.5 }%
        name "wall"
        size %{= wallThickness }% %{= floorSize.y }% %{= wallHeight }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation %{= -(floorSize.x * 0.5 + wallThickness * 0.5) }% 0 %{= wallHeight * 0.5 }%
        name "wall#2"
        size %{= wallThickness }% %{= floorSize.y }% %{= wallHeight }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation 0 %{= floorSize.y * 0.5 + wallThickness * 0.5 }% %{= wallHeight * 0.5 }%
        name "wall#3"
        size %{= floorSize.x + 2 * wallThickness }% %{= wallThickness }% %{= wallHeight }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
      SolidBox {
        translation 0 %{= -(floorSize.y * 0.5 + wallThickness * 0.5) }% %{= wallHeight * 0.5 }%
        name "wall#4"
        size %{= floorSize.x + 2 * wallThickness }% %{= wallThickness }% %{= wallHeight }%
        appearance IS wallAppearance
        contactMaterial IS contactMaterial
      }
    ]
    name IS name
    model "rectangle arena"
  }
}